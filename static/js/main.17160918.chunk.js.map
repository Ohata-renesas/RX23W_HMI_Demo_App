{"version":3,"sources":["ble.js","pageVoiceRecogResult.js","pageVoiceRecogSettings.js","pageIndoorEnvironment.js","pageInstructions.js","App.js","serviceWorker.js","index.js","img/connect.png","img/vr_result.png","img/vr_settings.png","img/indoor_environment.png","img/led_control.png"],"names":["bleDevice","this","bleInfo","deviceName","device","server","onDisconnectedHandler","serviceInfo","uuid","service","characteristicInfo","voiceRecogResult","characteristic","handler","voiceRecogInfo","voiceRecogParams","ledControl","envSensor","options","filters","services","name","connectServer","requestDevice","then","console","log","Promise","resolve","navigator","bluetooth","addEventListener","gatt","connect","getPrimaryService","getCharacteristics","getCharacteristic","characteristics","forEach","readValue","value","connected","writeValue","Uint8Array","writeValueWithoutResponse","characteristicName","startNotifications","disconnect","voiceRecogStatusText","PageIsVoiceRecogResult","props","DrawVoiceRecogStatus","status","wordId","score","wordInfo","Divider","Box","mt","DrawList","React","useState","setStatus","timeOutId","useRef","statusText","scoreText","wordText","statusTextStyle","fontSize","fontWeight","color","resultTextStyle","useEffect","length","current","text","setTimeout","clearTimeout","mb","Typography","style","map","info","index","key","useStyles","makeStyles","theme","box","marginBottom","spacing","formControl","margin","minWidth","title","button","cfThresholdValue","vdThresoldValue","gainValue","noiseSuppressorValue","beamFormingValue","PageIsVoiceRecogSettings","SelectConfideceThreshold","SelectVoiceDetectionThreshold","SelectGain","SelectNoiseSuppressor","SelectBeamForming","DrawButton","currentValue","setCurrentValue","classes","handleButtonClicked","parameters","parameterId","setParameters","Button","className","variant","onClick","setWordId","handleWordIdChanged","event","target","FormControl","InputLabel","Select","native","onChange","aria-label","PageIsIndoorEnvironment","DrawSensorData","unit","sensorData","temperature","maxValue","minValue","humidity","co2","tvoc","iaq","progress","setProgress","windowWidth","window","innerWidth","currentProgress","display","flexDirection","width","ml","mr","textAlign","alignItems","LinearProgress","header1","marginTop","header2","img","height","body","PageIsInstructions","src","connectImg","alt","vrResultImg","vrSettingsImg","indoorEnvImg","ledControlImg","wordInfoDummy","root","drawer","breakpoints","up","flexShrink","appBar","marginLeft","flexGrow","menuButton","marginRight","toolbar","mixins","drawerPaper","content","padding","backdrop","zIndex","DisplayPage","currentPage","App","useTheme","Countdown","bleConnected","mobileOpen","setMobileOpen","bleButtonClicked","setbleButtonClicked","connectionText","setConnectionText","open","vertical","horizontal","message","autoHideDuration","snackbarState","setSnackbarState","setSensorData","setVoiceRecogResult","setCurrentPage","openCircle","setOpenCircle","switchChecked","setSwitchChecked","handleSnackbarOpen","handleDrawerToggle","handleBleToggle","connectDevice","handleOnDisconnected","getService","setCharacteristic","_","readVoiceRecognitionInformation","handleVoiceRecognitionResult","handleEnvironmentalSensor","catch","error","result","getUint8","sign","information","cfth","vdth","gain","ns","bf","len","array","buffer","slice","decoder","TextDecoder","uint8Array","decode","handlePageChanged","handleLedOnOff","onoff","List","ListItem","ListItemText","primary","ListItemSecondaryAction","Switch","edge","currentIndex","indexOf","newChecked","push","splice","checked","inputProps","container","undefined","document","CssBaseline","AppBar","position","Toolbar","IconButton","noWrap","disabled","Boolean","Hidden","smUp","implementation","Drawer","anchor","direction","onClose","paper","ModalProps","keepMounted","xsDown","Snackbar","Backdrop","CircularProgress","isLocalhost","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","createMuiTheme","palette","light","main","dark","contrastText","secondary","ReactDOM","render","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.17160918.chunk.js","sourcesContent":["\r\nclass BleDevice {\r\n    constructor () {  \r\n        this.bleInfo = {\r\n            deviceName : 'RBLE-DEV',\r\n            device : null,\r\n            server : null,\r\n            onDisconnectedHandler : null,\r\n            serviceInfo : {\r\n                uuid : '65bcbd70-7952-439b-80b5-a5e8c4de44b0',\r\n                service : null,\r\n            },\r\n            characteristicInfo  : {\r\n                voiceRecogResult : {\r\n                    uuid : '0c71cedc-c090-4021-80a1-95c4b3215be8',\r\n                    characteristic : null,\r\n                    handler : null,\r\n                },\r\n                voiceRecogInfo : {\r\n                    uuid : '3ea2a6d7-bf5a-4841-870a-5df9c34895d9',\r\n                    characteristic : null,\r\n                },\r\n                voiceRecogParams : {\r\n                    uuid : 'c609788e-2f87-4ac8-b622-99e77287ca3c',\r\n                    characteristic : null,\r\n                },\r\n                ledControl : {\r\n                    uuid : 'c1f878d3-ff13-4a18-9b4d-058942171f8d',\r\n                    characteristic : null,\r\n                },\r\n                envSensor : {\r\n                    uuid : 'bcabfa13-a223-4715-a72e-60067b5a1537',\r\n                    characteristic : null,\r\n                    handler : null,\r\n                },\r\n            },\r\n        };\r\n        \r\n        this.options = {\r\n            filters: [\r\n                {services: [this.bleInfo.serviceInfo.uuid]},\r\n                {name: this.bleInfo.deviceName}\r\n            ]\r\n        };  \r\n    }\r\n\r\n    connectDevice(device, options, handler) {\r\n        if (!options) {\r\n            console.log(\"No options\");\r\n            return Promise.resolve();\r\n        }\r\n        else if (!device) {\r\n            return this.requestDevice(options)\r\n            .then(device => {\r\n                return this.connectServer(device, handler);\r\n            });\r\n        }\r\n        else {\r\n            return this.connectServer(device, handler);\r\n        }\r\n    }\r\n\r\n    requestDevice(options) {\r\n        if (!options) {\r\n            console.log(\"No options\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            console.log(\"Request the device\");\r\n            return navigator.bluetooth.requestDevice(options);\r\n        }\r\n    }\r\n\r\n    connectServer(device, handler) {\r\n        if ((!device) || !handler) {\r\n            console.log(\"No device or handler\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            this.bleInfo.device = device;\r\n            this.bleInfo.onDisconnectedHandler = handler;\r\n            this.bleInfo.device.addEventListener('gattserverdisconnected', handler);\r\n            console.log(\"Connect the GATT server\");\r\n            return device.gatt.connect();\r\n        }\r\n    }\r\n\r\n    getService(server, uuid) {\r\n        if ((!server) || (!uuid)) {\r\n            console.log(\"No server\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            this.bleInfo.server = server;\r\n            console.log(\"Get the service\");\r\n            return server.getPrimaryService(uuid);\r\n        }\r\n    }\r\n\r\n    getCharacteristics(service) {\r\n        if (!service) {\r\n            console.log(\"No service\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            this.bleInfo.serviceInfo.service = service;\r\n            console.log(\"Get characteristics\");\r\n            return service.getCharacteristics();\r\n        }\r\n    }\r\n\r\n    getCharacteristic(service, uuid) {\r\n        if ((!service) || (!uuid)) {\r\n            console.log(\"No service or uuid\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            this.bleInfo.serviceInfo.service = service;\r\n            console.log(\"Get characteristic\");\r\n            return service.getCharacteristic(uuid);\r\n        }\r\n    }\r\n\r\n    setCharacteristic(characteristics) {\r\n        if (!characteristics) {\r\n            console.log(\"No characteristics\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            characteristics.forEach(characteristic => {\r\n                switch (characteristic.uuid) {\r\n                    case this.bleInfo.characteristicInfo.voiceRecogResult.uuid :\r\n                        this.bleInfo.characteristicInfo.voiceRecogResult.characteristic = characteristic;\r\n                    break;\r\n\r\n                    case this.bleInfo.characteristicInfo.voiceRecogInfo.uuid :\r\n                        this.bleInfo.characteristicInfo.voiceRecogInfo.characteristic = characteristic;\r\n                    break;\r\n\r\n                    case this.bleInfo.characteristicInfo.voiceRecogParams.uuid :\r\n                        this.bleInfo.characteristicInfo.voiceRecogParams.characteristic = characteristic;\r\n                    break;\r\n\r\n                    case this.bleInfo.characteristicInfo.ledControl.uuid :\r\n                        this.bleInfo.characteristicInfo.ledControl.characteristic = characteristic;\r\n                    break;\r\n\r\n                    case this.bleInfo.characteristicInfo.envSensor.uuid :\r\n                        this.bleInfo.characteristicInfo.envSensor.characteristic = characteristic;\r\n                    break;\r\n\r\n                    default :\r\n                    break;\r\n                }\r\n            })\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    readValue(characteristic) {\r\n        if (!characteristic) {\r\n            console.log(\"No characteristic\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            console.log(\"Read value\");\r\n            return characteristic.readValue();\r\n        }\r\n    }\r\n\r\n    writeValueWithoutResponse (device, characteristic, value) {\r\n        if ((!characteristic) || (!value)) {\r\n            console.log(\"No characteristic or value\");\r\n            return;\r\n        }\r\n        else if (!device.gatt.connected) {\r\n            console.log(\"No connection\");\r\n            return;\r\n        }\r\n        else {\r\n            // value is an array (e.g. [1,2,3])\r\n            let writeValue = new Uint8Array(value);       \r\n            console.log(\"Write value without response\");\r\n            return characteristic.writeValueWithoutResponse(writeValue);\r\n        }\r\n    }\r\n\r\n    startNotifications(characteristicName, handler) {\r\n        if ((!characteristicName) || (!handler)) {\r\n            console.log(\"No characteristic or handler\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            characteristicName.handler = handler;\r\n            characteristicName.characteristic.addEventListener('characteristicvaluechanged', handler);\r\n            return characteristicName.characteristic.startNotifications();\r\n        }\r\n    }\r\n\r\n    disconnect(device) {   \r\n        if (!device) {\r\n            console.log(\"No device\");\r\n            return;\r\n        }      \r\n        else if (device.gatt.connected) {\r\n            console.log(\"Disconnect device\");\r\n            return device.gatt.disconnect();\r\n        } \r\n        else {\r\n            console.log(\"Disconeected : No connection\");\r\n            return;\r\n        }   \r\n    }\r\n}\r\n\r\nconst bleDevice = new BleDevice();\r\n\r\n export { bleDevice };","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n// const isNotConnected  = 0;\r\n// const isBeingDetected = 1;\r\nconst isUndetected    = 2;\r\nconst isFound         = 3;\r\nconst isNotFound      = 4;\r\nconst isUnconfidence  = 5;\r\nconst renesasBlue     = '#2a289d';\r\nconst renesasGray     = '#333333';\r\n\r\nconst voiceRecogStatusText = [\r\n  'Click or tap \"CONNECT\" on the top right',\r\n  'Detecting...',\r\n  'Please say something!',\r\n  'Success!',\r\n  \"No match\",\r\n  'Failed...',\r\n];\r\n\r\nfunction PageIsVoiceRecogResult (props) { \r\n\r\n  return (\r\n    <div>\r\n\r\n      <DrawVoiceRecogStatus \r\n      status = {props.voiceRecogResult.status} \r\n      wordId = {props.voiceRecogResult.wordId}\r\n      score = {props.voiceRecogResult.score}\r\n      wordInfo = {props.wordInfo}\r\n      />\r\n\r\n      <Divider/>\r\n\r\n      <Box mt = {2}>\r\n       <DrawList \r\n       wordInfo = {props.wordInfo}\r\n       />\r\n      </Box>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DrawVoiceRecogStatus(props) {\r\n  const [status, setStatus] = React.useState(props.status);\r\n  const timeOutId = React.useRef(null);\r\n  const statusText = React.useRef(voiceRecogStatusText[props.status]);\r\n  const scoreText = React.useRef('');\r\n  const wordText = React.useRef('');\r\n  const statusTextStyle = React.useRef({\r\n    fontSize: '150%', \r\n    fontWeight: 'bold',\r\n    color: renesasGray,\r\n  });\r\n  const resultTextStyle = React.useRef({\r\n    fontSize: '250%', \r\n    fontWeight: 'bold',\r\n    color: renesasGray,\r\n  });\r\n\r\n  React.useEffect(() => {\r\n\r\n    if (props.wordInfo.length) {\r\n      switch (props.status) {\r\n        case isFound :\r\n          scoreText.current = \"OK. Score is \" + props.score + '.'\r\n          wordText.current  = (props.wordId) + '. ' + props.wordInfo[props.wordId].text;\r\n          resultTextStyle.current = {...resultTextStyle.current, color : renesasBlue};\r\n        break;\r\n\r\n        case isNotFound :\r\n          scoreText.current = '';\r\n          wordText.current = '';\r\n        break;\r\n\r\n        case isUnconfidence :\r\n          scoreText.current = \"NG. Score is \" + props.score + '.'\r\n          wordText.current  = (props.wordId) + '. ' + props.wordInfo[props.wordId].text;\r\n          resultTextStyle.current = {...resultTextStyle.current, color : 'red'};\r\n        break;\r\n\r\n        default :\r\n        break;\r\n      }\r\n    }\r\n    else {\r\n      scoreText.current = '';\r\n      wordText.current = '';\r\n    }\r\n\r\n    statusText.current = voiceRecogStatusText[props.status];\r\n    \r\n    if (props.status === isUndetected) {\r\n      switch (status) {\r\n        case isFound : \r\n          timeOutId.current = setTimeout(() => {\r\n            setStatus(props.status);\r\n          }, 3000);\r\n        break;\r\n\r\n        case isNotFound :\r\n          timeOutId.current = setTimeout(() => {\r\n            setStatus(props.status);\r\n          }, 3000);\r\n        break;\r\n\r\n        case isUnconfidence :\r\n          timeOutId.current = setTimeout(() => {\r\n            setStatus(props.status);\r\n          }, 3000);\r\n        break;\r\n\r\n        default :\r\n          setStatus(props.status);\r\n        break;\r\n      }\r\n    }\r\n    else {\r\n      setStatus(props.status);\r\n    }    \r\n\r\n    return () => {\r\n      if (timeOutId.current) clearTimeout(timeOutId.current);\r\n      timeOutId.current = null;\r\n    }   \r\n\r\n  }, [props.status]);\r\n\r\n  return (\r\n    <Box mt={1} mb={2}>\r\n      <Typography style = {statusTextStyle.current}>\r\n        {statusText.current}\r\n      </Typography>\r\n      <Typography style = {resultTextStyle.current}>\r\n        {scoreText.current} \r\n      </Typography>\r\n      <Typography style = {resultTextStyle.current}>\r\n        {wordText.current} \r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction DrawList (props) {\r\n  if (!props.wordInfo.length) {\r\n    return (\r\n      <div>\r\n        {/* nothing */}\r\n      </div>\r\n    );\r\n  }\r\n  else {\r\n    return(\r\n      <Box>\r\n        <Box mb = {1}>\r\n          <Typography color = 'secondary' style = {{fontSize : '120%', fontWeight: 'bold'}}>\r\n            List\r\n          </Typography>\r\n        </Box>\r\n        {props.wordInfo.map((info, index) => (\r\n          ((index === 0) ? <div></div> : \r\n          (<Box key = {info.wordId} >\r\n            <Typography color = 'secondary' style = {{fontSize : '150%'}} >\r\n              {info.wordId + '. ' + info.text}\r\n            </Typography>\r\n          </Box>)\r\n        )))}\r\n      </Box>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nPageIsVoiceRecogResult.propTypes = {\r\n    window: PropTypes.func,\r\n  };\r\n\r\nexport { PageIsVoiceRecogResult };","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Divider, Select } from '@material-ui/core';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { bleDevice } from './ble'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  box: {\r\n    marginBottom: theme.spacing(0.2),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  title: {\r\n    fontSize: '150%',\r\n    fontWeight: 'bold',\r\n  },\r\n  button: {\r\n    margin: theme.spacing(0.5),\r\n    fontSize : '120%',\r\n  }\r\n}));\r\n\r\nconst isCfThreshold       = 1;\r\nconst isVdThreshold       = 2;\r\nconst isGain              = 3;\r\nconst isNoiseSuppressor   = 4;\r\nconst isBeamForming       = 5;\r\n\r\nconst cfThresholdValue = [\r\n   '70', ' 80',  '90', '100', '110',\r\n  '120', '130', '140', '150',\r\n];\r\n\r\nconst vdThresoldValue = [\r\n   '5000',  '6000',  '7000',  '8000', '9000', \r\n  '10000', '11000', '12000', '13000',\r\n]\r\n\r\nconst gainValue = [\r\n  '1', '2', '3', '4', '5',\r\n  '6', '7', '8', '9',\r\n];\r\n\r\nconst noiseSuppressorValue = [\r\n  '0', '1', '2', '3', \r\n  '4', '5', '6', '7',\r\n];\r\n\r\nconst beamFormingValue = [\r\n  '0', '1', '2', '3', \r\n  '4', '5', '6', '7',\r\n];\r\n\r\n\r\nconst setParameters = (parameterId, value, wordId) => {\r\n  const writeValue = value - 0; // string -> number\r\n\r\n  bleDevice.writeValueWithoutResponse (bleDevice.bleInfo.device, \r\n                                       bleDevice.bleInfo.characteristicInfo.voiceRecogParams.characteristic, \r\n                                      [parameterId, (writeValue >> 8), (writeValue & 0xFF), wordId]);\r\n}\r\n\r\nfunction PageIsVoiceRecogSettings (props) {\r\n\r\n  return (\r\n    <div>\r\n\r\n      <SelectConfideceThreshold wordInfo = {props.wordInfo} />\r\n\r\n      <Divider/>\r\n\r\n      <SelectVoiceDetectionThreshold wordInfo = {props.wordInfo}/>\r\n\r\n      <Divider/>\r\n\r\n      <SelectGain wordInfo = {props.wordInfo} />\r\n\r\n      <Divider/>\r\n\r\n      <SelectNoiseSuppressor wordInfo = {props.wordInfo} />\r\n\r\n      <Divider/>\r\n\r\n      <SelectBeamForming wordInfo = {props.wordInfo} />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DrawButton (props) {\r\n  const [currentValue, setCurrentValue] = React.useState('-1');\r\n  const classes = useStyles();\r\n\r\n  const handleButtonClicked = (value) => {\r\n    \r\n    if (!props.wordInfo[props.wordId]) {\r\n      console.log('No wordInfo');\r\n    }\r\n    else if (props.wordId !== '0') {\r\n      props.wordInfo[props.wordId].parameters[props.parameterId] = value - 0; // string -> number\r\n    }\r\n    else if (props.wordId === '0') {\r\n      for (let index in props.wordInfo) {\r\n        if (index !== '0') {\r\n          props.wordInfo[index].parameters[props.parameterId] = value - 0; // string -> number\r\n        }\r\n        else {\r\n          // nothing\r\n        }        \r\n      }\r\n    }\r\n    else {\r\n      // nothing\r\n    }\r\n    \r\n    setParameters(props.parameterId, value, props.wordId);\r\n    setCurrentValue(value);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (!props.wordInfo[props.wordId]) {\r\n      console.log('No wordInfo');\r\n    }\r\n    else if (props.wordId !== '0') {\r\n      setCurrentValue(props.wordInfo[props.wordId].parameters[props.parameterId]+ '');\r\n    }\r\n    else if (props.wordId === '0'){\r\n      setCurrentValue(props.wordInfo[1].parameters[props.parameterId]+ '');\r\n    }\r\n    else{\r\n      setCurrentValue('-1');\r\n    }\r\n    \r\n  }, [props.wordInfo[props.wordId]]);\r\n\r\n  return (\r\n    <div>\r\n        {props.value.map((value) => (\r\n          ((value === currentValue) \r\n          ? \r\n            (\r\n              <Button \r\n              className = {classes.button} \r\n              key = {value} \r\n              variant = 'outlined' \r\n              color = 'primary' \r\n              fontWeight = 'bold'\r\n              onClick = {() => handleButtonClicked(value)}\r\n              >\r\n                {value}\r\n              </Button>\r\n            )\r\n          :\r\n            (\r\n              <Button \r\n              className = {classes.button} \r\n              key = {value}\r\n              onClick = {() => handleButtonClicked(value)}\r\n              >\r\n                {value}\r\n              </Button>\r\n            )\r\n          )\r\n        ))}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nfunction SelectConfideceThreshold (props) {\r\n  const classes = useStyles();\r\n  const [wordId, setWordId] = React.useState(1);\r\n\r\n  const handleWordIdChanged = (event) => {\r\n    const value = event.target.value;\r\n\r\n    if (value === '-1') {\r\n      // nothing\r\n    }\r\n    else {\r\n      setWordId(value);\r\n    }    \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Box className = {classes.box}>\r\n        <Typography className = {classes.title}>\r\n          Confidence Threshold\r\n        </Typography>\r\n\r\n        {\r\n          ((!props.wordInfo[wordId]) \r\n          ?\r\n            (\r\n              <FormControl className={classes.formControl}>\r\n              <InputLabel >Word ID</InputLabel>\r\n              <Select\r\n                native\r\n                value={wordId}\r\n                onChange={handleWordIdChanged}\r\n              >\r\n                <option aria-label='None' value={'-1'} />\r\n              </Select>\r\n              </FormControl>\r\n            )\r\n          :\r\n            (\r\n              <FormControl className={classes.formControl}>\r\n              <InputLabel >Word ID</InputLabel>\r\n              <Select\r\n                native\r\n                value={wordId}\r\n                onChange={handleWordIdChanged}\r\n              >\r\n                {\r\n                  props.wordInfo.map((info, index) => (\r\n                    ((index === 0) ? \r\n                      (\r\n                        <option value={'0'}>All</option>\r\n                      )\r\n                    :\r\n                     (\r\n                      <option value={info.wordId}>\r\n                        No. {info.wordId}\r\n                      </option>\r\n                     )\r\n                    )\r\n                  ))\r\n                }\r\n              </Select>\r\n              </FormControl>\r\n            )\r\n          )\r\n        }\r\n\r\n        <DrawButton \r\n        wordInfo = {props.wordInfo}\r\n        value = {cfThresholdValue}\r\n        parameterId = {isCfThreshold}\r\n        wordId = {wordId}\r\n        />\r\n      </Box>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nfunction SelectVoiceDetectionThreshold (props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Box className = {classes.box} mt = {1} >\r\n        <Typography className = {classes.title}>\r\n          Voice Detection Threshold\r\n        </Typography>\r\n\r\n        <DrawButton \r\n        wordInfo = {props.wordInfo}\r\n        value = {vdThresoldValue}\r\n        parameterId = {isVdThreshold}\r\n        wordId = {1}\r\n        />\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SelectGain (props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Box className = {classes.box} mt = {1} >\r\n        <Typography className = {classes.title}>\r\n          Gain\r\n        </Typography>\r\n\r\n        <DrawButton \r\n        wordInfo = {props.wordInfo}\r\n        value = {gainValue}\r\n        parameterId = {isGain}\r\n        wordId = {1}\r\n        />\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SelectNoiseSuppressor (props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Box className = {classes.box} mt = {1} >\r\n        <Typography className = {classes.title}>\r\n          Noise Suppressor\r\n        </Typography>\r\n\r\n        <DrawButton \r\n        wordInfo = {props.wordInfo}\r\n        value = {noiseSuppressorValue}\r\n        parameterId = {isNoiseSuppressor}\r\n        wordId = {1}\r\n        />\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SelectBeamForming (props) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Box className = {classes.box} mt = {1} >\r\n        <Typography className = {classes.title}>\r\n          Beam Forming\r\n        </Typography>\r\n\r\n        <DrawButton \r\n        wordInfo = {props.wordInfo}\r\n        value = {beamFormingValue}\r\n        parameterId = {isBeamForming}\r\n        wordId = {1}\r\n        />\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nPageIsVoiceRecogSettings.propTypes = {\r\n    window: PropTypes.func,\r\n  };\r\n\r\nexport { PageIsVoiceRecogSettings };","\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nfunction PageIsIndoorEnvironment (props) {\r\n\r\n    return (\r\n      <div>\r\n\r\n        <DrawSensorData \r\n        name = {\"TEMP\"}\r\n        unit = {\"°C\"} \r\n        currentValue = {props.sensorData.temperature} \r\n        maxValue = {125} \r\n        minValue = {-40} \r\n        />\r\n\r\n        <Divider />\r\n\r\n        <DrawSensorData \r\n        name = {\"HUMI\"}         \r\n        unit = {\"%RH\"} \r\n        currentValue = {props.sensorData.humidity} \r\n        maxValue = {100} \r\n        minValue = {0} \r\n        />\r\n\r\n        <Divider />\r\n\r\n        <DrawSensorData \r\n        name = {\"CO2\"}         \r\n        unit = {\"ppm\"} \r\n        currentValue = {props.sensorData.co2} \r\n        maxValue = {10000} \r\n        minValue = {0} \r\n        />\r\n\r\n        <Divider />\r\n\r\n        <DrawSensorData \r\n        name = {\"TVOC\"}         \r\n        unit = {\"mg/m3\"} \r\n        currentValue = {props.sensorData.tvoc} \r\n        maxValue = {50} \r\n        minValue = {0} \r\n        />\r\n\r\n        <Divider />\r\n\r\n        <DrawSensorData \r\n        name = {\"IAQ\"}         \r\n        unit = {\"\"} \r\n        currentValue = {props.sensorData.iaq} \r\n        maxValue = {50} \r\n        minValue = {0} \r\n        />\r\n\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction DrawSensorData (props) {\r\n  const [progress, setProgress] = React.useState(0);\r\n  const timeOutId = React.useRef(null);  \r\n  const margin = React.useRef('0%');\r\n  const value = React.useRef(props.currentValue);\r\n\r\n  React.useEffect(() => {\r\n    timeOutId.current = setTimeout(() => { \r\n      const windowWidth = window.innerWidth\r\n      const currentProgress = (props.currentValue - props.minValue) / (props.maxValue - props.minValue) * 100;\r\n      value.current = props.currentValue;\r\n\r\n      if (windowWidth < 300) {\r\n        // small smartphone\r\n        margin.current = currentProgress * 0.78 + '%';   \r\n      }\r\n      else if (windowWidth < 500) {\r\n        // smartphone\r\n        margin.current = currentProgress * 0.8 + '%';   \r\n      }\r\n      else if (windowWidth < 800) {\r\n        // tablet\r\n        margin.current = currentProgress * 0.9 + '%';   \r\n      }\r\n      else if (windowWidth < 1500) {\r\n        // pc\r\n        margin.current = currentProgress * 0.93 + '%';   \r\n      }\r\n      else {\r\n        // monitor\r\n        margin.current = currentProgress * 0.94 + '%';   \r\n      }\r\n      \r\n      setProgress(currentProgress);\r\n    }, 300);\r\n    return () => {\r\n      if (timeOutId.current) clearTimeout(timeOutId.current);\r\n      timeOutId.current = null;\r\n    }\r\n  }, [props.currentValue]);\r\n\r\n  return (\r\n    <Box display = 'flex' flexDirection = 'row' width = '100%' mt={1} mb={2}>\r\n      <Box minWidth = {80} mt = {1.5}>\r\n        <Typography style = {{fontSize: '200%'}} color='secondary' >\r\n          {props.name}\r\n        </Typography>\r\n      </Box>\r\n      <Box width = '100%' ml = {2} mr= '35px'>\r\n        <Box  display = 'flex' flexDirection = 'row' textAlign = 'center' >\r\n          <Box ml = {margin.current}>\r\n            <Typography style = {{fontSize: '150%', fontWeight: 'bold'}} color = 'primary'>\r\n              {value.current}\r\n            </Typography>\r\n          </Box>\r\n          <Box mt = {2.2}>\r\n            <Typography style = {{fontSize: '80%', fontWeight: 'bold'}} color = 'secondary'>\r\n            {props.unit}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n        <Box display = 'flex' flexDirection = 'row' alignItems = 'center'>\r\n          <Box >\r\n            <Typography  color = 'textSecondary' style = {{fontSize: '80%', fontWeight: 'bold'}}>\r\n              {props.minValue}\r\n            </Typography>\r\n          </Box>\r\n          <Box width = '100%' mr = {1} ml = {1}>\r\n              <LinearProgress variant = 'determinate' value={progress} />\r\n          </Box>\r\n          <Box minWidth = '5%'>\r\n            <Typography  color = 'textSecondary' style = {{fontSize: '80%', fontWeight: 'bold'}}>\r\n              {props.maxValue}\r\n            </Typography>\r\n          </Box>          \r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nPageIsIndoorEnvironment.propTypes = {\r\n    window: PropTypes.func,\r\n  };\r\n\r\nexport { PageIsIndoorEnvironment };","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport connectImg from './img/connect.png';\r\nimport vrResultImg from './img/vr_result.png';\r\nimport vrSettingsImg from './img/vr_settings.png';\r\nimport indoorEnvImg from './img/indoor_environment.png';\r\nimport ledControlImg from './img/led_control.png';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  header1: {\r\n    fontSize : '150%',\r\n    fontWeight: 'bold',\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  header2: {\r\n    fontSize : '150%',\r\n    fontWeight: 'bold',\r\n  },\r\n  img : {\r\n    width : '60%',\r\n    height: '60%',\r\n    marginBottom: theme.spacing(1),\r\n    marginBottom: theme.spacing(5),\r\n  },\r\n  body: {\r\n    fontSize : '150%',\r\n    margin: theme.spacing(1.5),\r\n  },\r\n\r\n}));\r\n\r\nfunction PageIsInstructions (props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <div>\r\n\r\n        <Typography className = {classes.header1} >\r\n          1. Click or tap \"CONNECT\" on the top right\r\n        </Typography>\r\n        <img className = {classes.img} src={connectImg} alt=\"connectImage\" />\r\n\r\n        <Typography className = {classes.header1} >\r\n          2. The data received by BLE will be displayed on each page \r\n        </Typography>\r\n\r\n        <Typography className = {classes.header2} >\r\n          2.1. V/R Result \r\n        </Typography>\r\n        <Typography className = {classes.body} >\r\n          You can check voice recognition result and the words registered for library.\r\n        </Typography>\r\n        <img className = {classes.img} src={vrResultImg} alt=\"voiceRecogResultImage\" />\r\n\r\n        <Typography className = {classes.header2} >\r\n          2.2. V/R Settings \r\n        </Typography>\r\n        <Typography className = {classes.body} >\r\n          You can set parameters used in libraries. Confidence Threshold is available to  be set for each word. \r\n        </Typography>\r\n        <img className = {classes.img} src={vrSettingsImg} alt=\"voiceRecogSettingsImage\" />\r\n\r\n        <Typography className = {classes.header2} >\r\n          2.3. Indoor Environment  \r\n        </Typography>\r\n        <Typography className = {classes.body} >\r\n          You can check current sensor data (temperature, humidity, CO2, TVOC, and IAQ). \r\n        </Typography>\r\n        <img className = {classes.img} src={indoorEnvImg} alt=\"indoorEnvironmentImage\" />\r\n\r\n        <Typography className = {classes.header2} >\r\n          2.4. LED Control  \r\n        </Typography>\r\n        <Typography className = {classes.body} >\r\n          You can control LED1 on RX23W target board. \r\n        </Typography>\r\n        <img className = {classes.img} src={ledControlImg} alt=\"ledControlImage\" />\r\n\r\n\r\n\r\n      </div>\r\n\r\n\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n\r\nPageIsInstructions.propTypes = {\r\n    window: PropTypes.func,\r\n  };\r\n\r\nexport { PageIsInstructions };","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Switch from '@material-ui/core/Switch';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { bleDevice } from './ble'\nimport { PageIsVoiceRecogResult } from './pageVoiceRecogResult';\nimport { PageIsVoiceRecogSettings } from './pageVoiceRecogSettings';\nimport { PageIsIndoorEnvironment } from './pageIndoorEnvironment';\nimport { PageIsInstructions } from './pageInstructions';\n\n\nconst drawerWidth         = 200;\nconst isFinished          = 0;\nconst isInProgress        = 1;\nconst maxOfCountdown      = 10;\nconst isVoiceRecogResult  = 'V/R Result';\nconst isVoiceRecogSettigs = 'V/R Settings';\nconst isIndoorEnvironment = 'Indoor Environment';\nconst isLedControl        = 'LED Control';\nconst isInstructions      = 'Instructions';\nconst wordInfoDummy       = [];\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  title: {\n    flexGrow: 1,\n    color: 'white',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(2),\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#333333',\n  },\n}));\n\n\n\nfunction App(props) {\n  const { window } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const Countdown = useRef(maxOfCountdown);\n  const wordInfo = useRef([wordInfoDummy]);\n  const bleConnected = useRef(0);\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  const [bleButtonClicked, setbleButtonClicked] = React.useState(false);\n  const [connectionText, setConnectionText] = React.useState('CONNECT');\n  const [snackbarState, setSnackbarState] = React.useState({\n    open : false,\n    vertical : 'bottom',\n    horizontal: 'center',\n    message : '',\n    autoHideDuration : 5000,\n  });\n  const [sensorData, setSensorData] = React.useState({\n    temperature: 0.0,\n    humidity: 0.0,\n    co2: 0.0,\n    tvoc: 0.0,\n    iaq: 0.0,\n  });\n  const [voiceRecogResult, setVoiceRecogResult] = React.useState({\n    wordId : 0,\n    status : 0,\n    score : 0,\n  });\n  const [currentPage, setCurrentPage] = React.useState(isVoiceRecogResult);\n  const [openCircle, setOpenCircle] = React.useState(false);\n  const [switchChecked, setSwitchChecked] = React.useState([]);\n\n  const handleSwitchcheckedToggle = (value) => () => {\n    const currentIndex = switchChecked.indexOf(value);\n    const newChecked = [...switchChecked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n      handleLedOnOff(1);\n    } else {\n      newChecked.splice(currentIndex, 1);\n      handleLedOnOff(0);\n    }\n\n    setSwitchChecked(newChecked);\n  };\n\n  const handleSnackbarOpen = (text) => {\n    setSnackbarState({...snackbarState, open : true, message : text});\n  }\n\n  const handleSnackbarClose = () => {\n    setSnackbarState({...snackbarState, open: false});\n  }\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const handleBleToggle = () => {\n    if (!bleConnected.current) {\n      bleConnected.current = 1;\n      wordInfo.current = [wordInfoDummy];\n      setbleButtonClicked(true);\n      setOpenCircle(true);\n      bleDevice.connectDevice(bleDevice.bleInfo.device, bleDevice.options, handleOnDisconnected)\n      .then(server => {        \n        handleSnackbarOpen('Get the service');\n        return bleDevice.getService(server, bleDevice.bleInfo.serviceInfo.uuid);\n      })\n      .then(service => {\n        handleSnackbarOpen('Get the characteristic');\n        return bleDevice.getCharacteristics(service);\n      })\n      .then(characteristics => {\n        return bleDevice.setCharacteristic(characteristics);\n      })\n      .then(_ => {\n        handleSnackbarOpen('Get Voice Recognition Information');\n        return readVoiceRecognitionInformation();\n      })\n      .then(_ => {\n        handleSnackbarOpen('Start notification');\n        return bleDevice.startNotifications(bleDevice.bleInfo.characteristicInfo.voiceRecogResult, \n                                            handleVoiceRecognitionResult);\n      })\n      .then(_ => {\n        return bleDevice.startNotifications(bleDevice.bleInfo.characteristicInfo.envSensor, \n                                            handleEnvironmentalSensor);\n      })\n      .then(_ => {\n        Countdown.current = maxOfCountdown;\n        bleConnected.current = 1;\n        setOpenCircle(false);\n        setbleButtonClicked(false);\n        handleSnackbarOpen('Measurement is started');\n        setConnectionText('DISCONNECT');\n\n        setVoiceRecogResult({...voiceRecogResult, status : 2});\n      })\n      .catch(error => {\n        bleConnected.current = 0;\n        handleSnackbarOpen('' + error);\n        console.log(error);\n\n        if (bleDevice.bleInfo.device) {\n          handleSnackbarOpen('Reconnection countdown: ' + Countdown.current);        \n          console.log('Reconnection countdown: ' + Countdown.current);\n          if (Countdown.current > 0) {\n            Countdown.current--;    \n          }\n          else {\n            Countdown.current = maxOfCountdown;\n            setOpenCircle(false);\n            setbleButtonClicked(false);\n            handleSnackbarOpen('Cannot connect device...');\n            console.log('Cannot connect device...');\n          } \n        }\n        else {\n          setConnectionText('CONNECT');\n          setOpenCircle(false);\n          setbleButtonClicked(false);\n        }  \n      });\n    }\n    else {\n      setbleButtonClicked(true);\n      bleConnected.current = 0;\n      setConnectionText('CONNECT');\n      bleDevice.disconnect(bleDevice.bleInfo.device);\n      setbleButtonClicked(false);\n      handleSnackbarOpen('The device is disconnected');\n      setVoiceRecogResult({...voiceRecogResult, status : 0});\n    }\n  }\n\n  const handleOnDisconnected = () => {\n    if (bleConnected.current) {\n      bleConnected.current = 0;\n      console.log('unexpected disconnection');\n      handleBleToggle();\n    }\n    else {\n      bleConnected.current = 0;\n    }\n  }\n\n  const handleVoiceRecognitionResult = (event) => {\n    const value = event.target.value;\n    const result = {}; \n    result.wordId  = value.getUint8(0);\n    result.status  = value.getUint8(1);\n    result.score   = value.getUint8(2);\n    // Log\n    console.log('Word ID : ' + result.wordId);\n    console.log('Result : '  + result.status);\n    console.log('Score : '   + result.score);\n\n    setVoiceRecogResult({...result});\n  }\n\n  const handleEnvironmentalSensor = (event) => {\n   const value = event.target.value;\n   const sign = value.getUint8(0);\n   const result = {};\n   if (sign === 1) {\n     result.temperature  = (-1) * (value.getUint8(1) + (value.getUint8(2) * 0.01));\n   }\n   else {\n    result.temperature  = value.getUint8(1) + (value.getUint8(2) * 0.01);\n   } \n   result.humidity  = (value.getUint8(3) << 8)  + value.getUint8(4)  + (value.getUint8(5) * 0.01);\n   result.co2   = (value.getUint8(6) << 8)  + value.getUint8(7)  + (value.getUint8(8) * 0.01);\n   result.tvoc  = (value.getUint8(9) << 8)  + value.getUint8(10) + (value.getUint8(11) * 0.01);\n   result.iaq   = (value.getUint8(12) << 8) + value.getUint8(13) + (value.getUint8(14) * 0.01);\n    // Log\n    console.log('Temperature : ' + result.temperature);\n    console.log('Humidity : '    + result.humidity);\n    console.log('CO2 : '         + result.co2);\n    console.log('TVOC : '        + result.tvoc);\n    console.log('IAQ : '         + result.iaq);\n\n    setSensorData({...result});\n  }   \n\n  const readVoiceRecognitionInformation = () => {\n    return bleDevice.readValue(bleDevice.bleInfo.characteristicInfo.voiceRecogInfo.characteristic)\n    .then(information => {\n      const result = {};\n      result.status     = information.getUint8(0);\n      const cfth        = information.getUint8(1);\n      const vdth        = (information.getUint8(2) << 8) + information.getUint8(3);\n      const gain        = information.getUint8(4);\n      const ns          = information.getUint8(5);\n      const bf          = information.getUint8(6);\n      result.parameters = [0, cfth, vdth, gain, ns, bf]; // 0 is dummy\n      result.wordId     = information.getUint8(7);\n      result.len        = information.getUint8(8);\n      const array       = information.buffer.slice(9, 9 + (result.len - 1));           \n      const decoder     = new TextDecoder('utf-8'); \n      const uint8Array  = new Uint8Array(array);\n      result.text = decoder.decode(uint8Array); \n      console.log(result.text);\n      wordInfo.current = [...wordInfo.current, result];\n\n      if (result.status === isInProgress) {\n        return readVoiceRecognitionInformation();\n      }\n      else if (result.status === isFinished) {   \n        if (wordInfo.current.length !== (wordInfo.current.slice(-1)[0].wordId + 1)) {\n          return readVoiceRecognitionInformation();\n        }\n        else {\n          return Promise.resolve();\n        }        \n      }\n      else {\n        // nothing\n      }\n    })\n  }\n\n  const handlePageChanged = (text) => {\n    setCurrentPage(text);\n  }\n\n  const handleLedOnOff = (onoff) => {\n    bleDevice.writeValueWithoutResponse (bleDevice.bleInfo.device, \n                                         bleDevice.bleInfo.characteristicInfo.ledControl.characteristic, \n                                         [onoff]);\n  }\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <List>\n        <ListItem button key={isVoiceRecogResult} onClick={() => handlePageChanged(isVoiceRecogResult)}>\n         <ListItemText primary={isVoiceRecogResult} />\n        </ListItem>\n        <ListItem button key={isVoiceRecogSettigs} onClick={() => handlePageChanged(isVoiceRecogSettigs)}>\n          <ListItemText primary={isVoiceRecogSettigs} />\n        </ListItem>\n        <ListItem button key={isIndoorEnvironment} onClick={() => handlePageChanged(isIndoorEnvironment)}>\n         <ListItemText primary={isIndoorEnvironment} />\n        </ListItem>\n        <ListItem>\n          <ListItemText key={isLedControl} primary={isLedControl} />\n          <ListItemSecondaryAction>\n            <Switch\n              edge='end'\n              onChange={handleSwitchcheckedToggle(isLedControl)}\n              checked={switchChecked.indexOf(isLedControl) !== -1}\n              inputProps={{ 'aria-labelledby': isLedControl }}\n              color='primary' \n            />\n          </ListItemSecondaryAction>\n        </ListItem>\n      </List>\n      <Divider />\n      <List>\n        <ListItem button key={isInstructions} onClick={() => handlePageChanged(isInstructions)}>\n          <ListItemText primary={isInstructions} />\n        </ListItem>\n      </List>\n    </div>\n  );\n\n\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position='fixed' className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color='inherit'\n            aria-label='open drawer'\n            edge='start'\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n            style={{color:'white'}}>\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.title} variant='h6' noWrap>\n            RX23W HMI DEMO\n          </Typography>\n          <Button \n          color='inherit' \n          style={{color:'white'}} \n          disabled = {Boolean(bleButtonClicked)}\n          onClick={handleBleToggle}>\n            {connectionText}\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label='mailbox folders'>\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation='css'>\n          <Drawer\n            container={container}\n            variant='temporary'\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation='css'>\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant='permanent'\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <DisplayPage \n        currentPage={currentPage} \n        wordInfo={wordInfo.current}\n        voiceRecogResult={voiceRecogResult}\n        sensorData={sensorData}\n        />\n      </main>\n      <Snackbar\n        open={snackbarState.open}\n        onClose={handleSnackbarClose}\n        message={snackbarState.message}\n        key={snackbarState.vertical + snackbarState.horizontal}\n        autoHideDuration={snackbarState.autoHideDuration}\n      />\n      <Backdrop className={classes.backdrop} open={openCircle} >\n        <CircularProgress color='inherit' />\n      </Backdrop>\n    </div>\n  );\n}\n\nfunction DisplayPage(props) {\n\n  switch (props.currentPage) {\n    case isVoiceRecogResult :\n      return (\n        <PageIsVoiceRecogResult \n        wordInfo = {props.wordInfo} \n        voiceRecogResult = {props.voiceRecogResult}\n        />\n      );\n\n    case isVoiceRecogSettigs : \n      return (\n        <div>\n          <PageIsVoiceRecogSettings wordInfo={props.wordInfo} />\n        </div>\n      );\n\n    case isIndoorEnvironment :\n      return(\n        <div>\n          <PageIsIndoorEnvironment sensorData={props.sensorData} />\n        </div>\n      );\n\n    case isInstructions :\n      return (\n        <div>\n          <PageIsInstructions />\n        </div>\n        );\n\n    default :\n    return (\n      <div>\n        <Typography>Error</Typography>\n      </div>\n      );\n  }\n}\n\n\nApp.propTypes = {\n\n  window: PropTypes.func,\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createMuiTheme} from '@material-ui/core/styles'\nimport {MuiThemeProvider} from '@material-ui/core/styles' \n\nconst theme = createMuiTheme({ \n  palette: {\n    primary: {\n      light: '#5453b0',\n      main: '#2a289d',\n      dark: '#1d1c6d',\n      contrastText: '#000000',\n    },\n    secondary: {\n      light: '#5b5b5b',\n      main: '#333333',\n      dark: '#232323',\n      contrastText: '#000000',\n    },\n  },\n})\n\nReactDOM.render(\n  // <React.StrictMode>\n      <MuiThemeProvider theme={theme}>\n        <App/>\n      </MuiThemeProvider>\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/connect.b8a4479e.png\";","module.exports = __webpack_public_path__ + \"static/media/vr_result.7c652ba5.png\";","module.exports = __webpack_public_path__ + \"static/media/vr_settings.ef163af4.png\";","module.exports = __webpack_public_path__ + \"static/media/indoor_environment.3588c636.png\";","module.exports = __webpack_public_path__ + \"static/media/led_control.6f62af63.png\";"],"sourceRoot":""}