{"version":3,"sources":["ble.js","pageVoiceRecogResult.js","pageIndoorEnvironment.js","App.js","serviceWorker.js","index.js"],"names":["bleDevice","this","bleInfo","deviceName","device","server","onDisconnectedHandler","serviceInfo","uuid","service","characteristicInfo","voiceRecogResult","characteristic","handler","voiceRecogInfo","voiceRecogParams","ledControl","envSensor","options","filters","services","name","connectServer","requestDevice","then","console","log","Promise","resolve","navigator","bluetooth","addEventListener","gatt","connect","getPrimaryService","getCharacteristics","getCharacteristic","characteristics","forEach","readValue","value","connected","writeValue","Uint8Array","writeValueWithoutResponse","characteristicName","startNotifications","disconnect","useStyles","makeStyles","theme","boxWrapper","width","height","typography","fontSize","PageIsVoiceRecogResult","props","window","innerWidth","innerHeight","Typography","style","color","PageIsIndoorEnvironment","DrawSensorData","unit","currentValue","sensorData","temperature","maxValue","minValue","Divider","humidity","co2","tvoc","iaq","React","useState","progress","setProgress","timeOutId","useRef","margin","useEffect","current","setTimeout","currentProgress","clearTimeout","Box","display","flexDirection","mt","mb","minWidth","ml","mr","textAlign","fontWeight","alignItems","LinearProgress","variant","isVdThreshold","root","drawer","breakpoints","up","flexShrink","appBar","marginLeft","title","flexGrow","menuButton","marginRight","spacing","toolbar","mixins","drawerPaper","content","padding","backdrop","zIndex","nested","paddingLeft","DisplayPage","currentPage","wordInfo","App","classes","useTheme","Countdown","tmpWordInfo","bleConnected","mobileOpen","setMobileOpen","bleButtonClicked","setbleButtonClicked","connectionText","setConnectionText","open","vertical","horizontal","message","autoHideDuration","snackbarState","setSnackbarState","setWordInfo","setSensorData","wordId","status","score","setVoiceRecogResult","setCurrentPage","openCircle","setOpenCircle","openNestedList","setOpenNestedList","switchChecked","setSwitchChecked","handleSnackbarOpen","text","handleDrawerToggle","handleBleToggle","connectDevice","handleOnDisconnected","getService","setCharacteristic","_","readVoiceRecognitionInformation","handleVoiceRecognitionResult","handleEnvironmentalSensor","catch","error","event","target","result","getUint8","sign","information","cf","vd","gain","ns","bf","length","array","buffer","slice","decoder","TextDecoder","uint8Array","decode","handlePageChanged","className","List","ListItem","button","key","onClick","ListItemText","primary","Collapse","in","timeout","unmountOnExit","component","disablePadding","ListItemSecondaryAction","Switch","edge","onChange","currentIndex","indexOf","newChecked","push","splice","checked","inputProps","container","undefined","document","body","CssBaseline","AppBar","position","Toolbar","IconButton","aria-label","noWrap","Button","disabled","Boolean","Hidden","smUp","implementation","Drawer","anchor","direction","onClose","paper","ModalProps","keepMounted","xsDown","Snackbar","Backdrop","CircularProgress","isLocalhost","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","createMuiTheme","palette","light","main","dark","contrastText","secondary","ReactDOM","render","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b9db7b04.chunk.js","sourcesContent":["\r\nclass BleDevice {\r\n    constructor () {  \r\n        this.bleInfo = {\r\n            deviceName : 'RBLE-DEV',\r\n            device : null,\r\n            server : null,\r\n            onDisconnectedHandler : null,\r\n            serviceInfo : {\r\n                uuid : '65bcbd70-7952-439b-80b5-a5e8c4de44b0',\r\n                service : null,\r\n            },\r\n            characteristicInfo  : {\r\n                voiceRecogResult : {\r\n                    uuid : '0c71cedc-c090-4021-80a1-95c4b3215be8',\r\n                    characteristic : null,\r\n                    handler : null,\r\n                },\r\n                voiceRecogInfo : {\r\n                    uuid : '3ea2a6d7-bf5a-4841-870a-5df9c34895d9',\r\n                    characteristic : null,\r\n                },\r\n                voiceRecogParams : {\r\n                    uuid : 'c609788e-2f87-4ac8-b622-99e77287ca3c',\r\n                    characteristic : null,\r\n                },\r\n                ledControl : {\r\n                    uuid : 'c1f878d3-ff13-4a18-9b4d-058942171f8d',\r\n                    characteristic : null,\r\n                },\r\n                envSensor : {\r\n                    uuid : 'bcabfa13-a223-4715-a72e-60067b5a1537',\r\n                    characteristic : null,\r\n                    handler : null,\r\n                },\r\n            },\r\n        };\r\n        \r\n        this.options = {\r\n            filters: [\r\n                {services: [this.bleInfo.serviceInfo.uuid]},\r\n                {name: this.bleInfo.deviceName}\r\n            ]\r\n        };  \r\n    }\r\n\r\n    connectDevice(device, options, handler) {\r\n        if (!options) {\r\n            console.log(\"No options\");\r\n            return Promise.resolve();\r\n        }\r\n        else if (!device) {\r\n            return this.requestDevice(options)\r\n            .then(device => {\r\n                return this.connectServer(device, handler);\r\n            });\r\n        }\r\n        else {\r\n            return this.connectServer(device, handler);\r\n        }\r\n    }\r\n\r\n    requestDevice(options) {\r\n        if (!options) {\r\n            console.log(\"No options\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            console.log(\"Request the device\");\r\n            return navigator.bluetooth.requestDevice(options);\r\n        }\r\n    }\r\n\r\n    connectServer(device, handler) {\r\n        if ((!device) || !handler) {\r\n            console.log(\"No device or handler\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            this.bleInfo.device = device;\r\n            this.bleInfo.onDisconnectedHandler = handler;\r\n            this.bleInfo.device.addEventListener('gattserverdisconnected', handler);\r\n            console.log(\"Connect the GATT server\");\r\n            return device.gatt.connect();\r\n        }\r\n    }\r\n\r\n    getService(server, uuid) {\r\n        if ((!server) || (!uuid)) {\r\n            console.log(\"No server\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            this.bleInfo.server = server;\r\n            console.log(\"Get the service\");\r\n            return server.getPrimaryService(uuid);\r\n        }\r\n    }\r\n\r\n    getCharacteristics(service) {\r\n        if (!service) {\r\n            console.log(\"No service\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            this.bleInfo.serviceInfo.service = service;\r\n            console.log(\"Get characteristics\");\r\n            return service.getCharacteristics();\r\n        }\r\n    }\r\n\r\n    getCharacteristic(service, uuid) {\r\n        if ((!service) || (!uuid)) {\r\n            console.log(\"No service or uuid\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            this.bleInfo.serviceInfo.service = service;\r\n            console.log(\"Get characteristic\");\r\n            return service.getCharacteristic(uuid);\r\n        }\r\n    }\r\n\r\n    setCharacteristic(characteristics) {\r\n        if (!characteristics) {\r\n            console.log(\"No characteristics\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            characteristics.forEach(characteristic => {\r\n                switch (characteristic.uuid) {\r\n                    case this.bleInfo.characteristicInfo.voiceRecogResult.uuid :\r\n                        this.bleInfo.characteristicInfo.voiceRecogResult.characteristic = characteristic;\r\n                    break;\r\n\r\n                    case this.bleInfo.characteristicInfo.voiceRecogInfo.uuid :\r\n                        this.bleInfo.characteristicInfo.voiceRecogInfo.characteristic = characteristic;\r\n                    break;\r\n\r\n                    case this.bleInfo.characteristicInfo.voiceRecogParams.uuid :\r\n                        this.bleInfo.characteristicInfo.voiceRecogParams.characteristic = characteristic;\r\n                    break;\r\n\r\n                    case this.bleInfo.characteristicInfo.ledControl.uuid :\r\n                        this.bleInfo.characteristicInfo.ledControl.characteristic = characteristic;\r\n                    break;\r\n\r\n                    case this.bleInfo.characteristicInfo.envSensor.uuid :\r\n                        this.bleInfo.characteristicInfo.envSensor.characteristic = characteristic;\r\n                    break;\r\n\r\n                    default :\r\n                    break;\r\n                }\r\n            })\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    readValue(characteristic) {\r\n        if (!characteristic) {\r\n            console.log(\"No characteristic\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            console.log(\"Read value\");\r\n            return characteristic.readValue();\r\n        }\r\n    }\r\n\r\n    writeValueWithoutResponse (device, characteristic, value) {\r\n        if ((!characteristic) || (!value)) {\r\n            console.log(\"No characteristic or value\");\r\n            return;\r\n        }\r\n        else if (!device.gatt.connected) {\r\n            console.log(\"No connection\");\r\n            return;\r\n        }\r\n        else {\r\n            // value is an array (e.g. [1,2,3])\r\n            let writeValue = new Uint8Array(value);       \r\n            console.log(\"Write value without response\");\r\n            return characteristic.writeValueWithoutResponse(writeValue);\r\n        }\r\n    }\r\n\r\n    startNotifications(characteristicName, handler) {\r\n        if ((!characteristicName) || (!handler)) {\r\n            console.log(\"No characteristic or handler\");\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            characteristicName.handler = handler;\r\n            characteristicName.characteristic.addEventListener('characteristicvaluechanged', handler);\r\n            return characteristicName.characteristic.startNotifications();\r\n        }\r\n    }\r\n\r\n    disconnect(device) {   \r\n        if (!device) {\r\n            console.log(\"No device\");\r\n            return;\r\n        }      \r\n        else if (device.gatt.connected) {\r\n            console.log(\"Disconnect device\");\r\n            return device.gatt.disconnect();\r\n        } \r\n        else {\r\n            console.log(\"Disconeected : No connection\");\r\n            return;\r\n        }   \r\n    }\r\n}\r\n\r\nconst bleDevice = new BleDevice();\r\n\r\n export { bleDevice };","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Box from '@material-ui/core/Box';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  boxWrapper : {\r\n    width: '100%', \r\n    height: '100%'\r\n  },\r\n\r\n  typography : {\r\n    fontSize : '100%',\r\n  }\r\n\r\n}));\r\n\r\nconst renesasBlue = '#2a289d';\r\nconst renesasGray = '#333333';\r\n\r\nfunction PageIsVoiceRecogResult (props) {\r\n  const classes = useStyles();\r\n\r\n  const width = window.innerWidth;\r\n  const height = window.innerHeight;\r\n\r\n\r\n\r\n\r\n   \r\n\r\n  return (\r\n    <div>\r\n      <Typography style={{color: renesasGray, fontSize :'200%'}}>\r\n        Voice Recognition Result\r\n\r\n      </Typography>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nPageIsVoiceRecogResult.propTypes = {\r\n    window: PropTypes.func,\r\n  };\r\n\r\nexport { PageIsVoiceRecogResult };","\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nfunction PageIsIndoorEnvironment (props) {\r\n\r\n    return (\r\n      <div>\r\n\r\n        <DrawSensorData \r\n        name = {\"TEMP\"}\r\n        unit = {\"°C\"} \r\n        currentValue = {props.sensorData.temperature} \r\n        maxValue = {125} \r\n        minValue = {-40} \r\n        />\r\n\r\n        <Divider />\r\n\r\n        <DrawSensorData \r\n        name = {\"HUMI\"}         \r\n        unit = {\"%RH\"} \r\n        currentValue = {props.sensorData.humidity} \r\n        maxValue = {100} \r\n        minValue = {0} \r\n        />\r\n\r\n        <Divider />\r\n\r\n        <DrawSensorData \r\n        name = {\"CO2\"}         \r\n        unit = {\"ppm\"} \r\n        currentValue = {props.sensorData.co2} \r\n        maxValue = {10000} \r\n        minValue = {0} \r\n        />\r\n\r\n        <Divider />\r\n\r\n        <DrawSensorData \r\n        name = {\"TVOC\"}         \r\n        unit = {\"mg/m3\"} \r\n        currentValue = {props.sensorData.tvoc} \r\n        maxValue = {50} \r\n        minValue = {0} \r\n        />\r\n\r\n        <Divider />\r\n\r\n        <DrawSensorData \r\n        name = {\"IAQ\"}         \r\n        unit = {\"\"} \r\n        currentValue = {props.sensorData.iaq} \r\n        maxValue = {50} \r\n        minValue = {0} \r\n        />\r\n\r\n      </div>\r\n    );\r\n}\r\n\r\nfunction DrawSensorData (props) {\r\n  const [progress, setProgress] = React.useState(0);\r\n  const timeOutId = React.useRef(null);  \r\n  const margin = React.useRef('0%');\r\n  const value = React.useRef(props.currentValue);\r\n\r\n  React.useEffect(() => {\r\n    timeOutId.current = setTimeout(() => { \r\n      const currentProgress = (props.currentValue - props.minValue) / (props.maxValue - props.minValue) * 100;\r\n      value.current = props.currentValue;\r\n      margin.current = currentProgress * 0.9 + '%';   \r\n      setProgress(currentProgress);\r\n    }, 500);\r\n    return () => {\r\n      if (timeOutId.current) clearTimeout(timeOutId.current);\r\n      timeOutId.current = null;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Box display = 'flex' flexDirection = 'row' width = '100%' mt={1} mb={2}>\r\n      <Box minWidth = {80} mt = {1.5}>\r\n        <Typography style = {{fontSize: '200%'}} color='secondary' >\r\n          {props.name}\r\n        </Typography>\r\n      </Box>\r\n      <Box width = '100%' ml = {2} mr= '35px'>\r\n        <Box  display = 'flex' flexDirection = 'row' textAlign = 'center' >\r\n          <Box ml = {margin.current}>\r\n            <Typography style = {{fontSize: '200%', fontWeight: 'bold'}} color = 'primary'>\r\n              {value.current}\r\n            </Typography>\r\n          </Box>\r\n          <Box mt = {2.2}>\r\n            <Typography style = {{fontSize: '80%', fontWeight: 'bold'}} color = 'secondary'>\r\n            {props.unit}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n        <Box display = 'flex' flexDirection = 'row' alignItems = 'center'>\r\n          <Box >\r\n            <Typography  color = 'textSecondary' style = {{fontSize: '80%', fontWeight: 'bold'}}>\r\n              {props.minValue}\r\n            </Typography>\r\n          </Box>\r\n          <Box width = '100%' mr = {1} ml = {1}>\r\n              <LinearProgress variant = 'determinate' value={progress} />\r\n          </Box>\r\n          <Box minWidth = {35}>\r\n            <Typography  color = 'textSecondary' style = {{fontSize: '80%', fontWeight: 'bold'}}>\r\n              {props.maxValue}\r\n            </Typography>\r\n          </Box>          \r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nPageIsIndoorEnvironment.propTypes = {\r\n    window: PropTypes.func,\r\n  };\r\n\r\nexport { PageIsIndoorEnvironment };","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Collapse from '@material-ui/core/Collapse';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Switch from '@material-ui/core/Switch';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { bleDevice } from './ble'\nimport { PageIsVoiceRecogResult } from './pageVoiceRecogResult';\n// import { PageIsVoiceRecogSettings } from './pageVoiceRecogSettings';\nimport { PageIsIndoorEnvironment } from './pageIndoorEnvironment';\n// import { PageIsInstructions } from './pageInstructions';\n\n\nconst drawerWidth         = 200;\nconst isFinished          = 0;\nconst isInProgress        = 1;\nconst maxOfCountdown      = 10;\nconst isVoiceRecogResult  = \"V/R Result\";\nconst isVoiceRecogSettigs = \"V/R Settings\";\nconst isIndoorEnvironment = \"Indoor Environment\";\nconst isLedControl        = \"LED Control\";\nconst isInstructions      = \"Instructions\";\nconst isCfThreshold       = \"Confidence Threshold\";\nconst isVdThreshold       = \"Voice Detection Threshold\";\nconst isGain              = \"Gain\";\nconst isNoiseSuppressor   = \"Noise Suppressor\";\nconst isBeamForming       = \"Beam Forming\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n    },\n  },\n  title: {\n    flexGrow: 1,\n    color: 'white',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none',\n    },\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(2),\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#333333',\n  },\n  nested: {\n    paddingLeft: theme.spacing(4),\n  },\n}));\n\n\n\nfunction App(props) {\n  const { window } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const Countdown = useRef(maxOfCountdown);\n  const timeOutId = useRef(null);\n  const tmpWordInfo = useRef([]);\n  const bleConnected = useRef(0);\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  const [bleButtonClicked, setbleButtonClicked] = React.useState(false);\n  const [connectionText, setConnectionText] = React.useState(\"CONNECT\");\n  const [snackbarState, setSnackbarState] = React.useState({\n    open : true,\n    vertical : 'bottom',\n    horizontal: 'center',\n    message : 'Please click or tap \"CONNECT\" on the top-right',\n    autoHideDuration : 5000,\n  });\n  const [wordInfo, setWordInfo] = React.useState([]);\n  const [sensorData, setSensorData] = React.useState({\n    temperature: 0.0,\n    humidity: 0.0,\n    co2: 0.0,\n    tvoc: 0.0,\n    iaq: 0.0,\n  });\n  const [voiceRecogResult, setVoiceRecogResult] = React.useState({\n    wordId : 0,\n    status : 0,\n    score : 0,\n  });\n  const [currentPage, setCurrentPage] = React.useState(isVoiceRecogResult);\n  const [openCircle, setOpenCircle] = React.useState(false);\n  const [openNestedList, setOpenNestedList] = React.useState(false);\n  const [switchChecked, setSwitchChecked] = React.useState([]);\n\n  const handleSwitchcheckedToggle = (value) => () => {\n    const currentIndex = switchChecked.indexOf(value);\n    const newChecked = [...switchChecked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n      bleDevice.writeValueWithoutResponse (bleDevice.bleInfo.device, \n                                           bleDevice.bleInfo.characteristicInfo.ledControl.characteristic, \n                                           [1]);\n    } else {\n      newChecked.splice(currentIndex, 1);\n      bleDevice.writeValueWithoutResponse (bleDevice.bleInfo.device, \n                                           bleDevice.bleInfo.characteristicInfo.ledControl.characteristic, \n                                           [0]);\n    }\n\n    setSwitchChecked(newChecked);\n  };\n\n  const handleNestedListClicked = () => {\n    setOpenNestedList(!openNestedList);\n  };\n\n  const handleSnackbarOpen = (text) => {\n    setSnackbarState({...snackbarState, open : true, message : text});\n  }\n\n  const handleSnackbarClose = () => {\n    setSnackbarState({...snackbarState, open: false});\n  }\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const handleBleToggle = () => {\n    if (!bleConnected.current) {\n      bleConnected.current = 1;\n      tmpWordInfo.current = [];\n      setbleButtonClicked(true);\n      bleDevice.connectDevice(bleDevice.bleInfo.device, bleDevice.options, handleOnDisconnected)\n      .then(server => {        \n        setOpenCircle(true);\n        handleSnackbarOpen(\"Get the service\");\n        return bleDevice.getService(server, bleDevice.bleInfo.serviceInfo.uuid);\n      })\n      .then(service => {\n        handleSnackbarOpen(\"Get the characteristic\");\n        return bleDevice.getCharacteristics(service);\n      })\n      .then(characteristics => {\n        return bleDevice.setCharacteristic(characteristics);\n      })\n      .then(_ => {\n        handleSnackbarOpen(\"Get Voice Recognition Information\");\n        return readVoiceRecognitionInformation();\n      })\n      .then(_ => {\n        handleSnackbarOpen(\"Start notification\");\n        return bleDevice.startNotifications(bleDevice.bleInfo.characteristicInfo.voiceRecogResult, \n                                            handleVoiceRecognitionResult);\n      })\n      .then(_ => {\n        return bleDevice.startNotifications(bleDevice.bleInfo.characteristicInfo.envSensor, \n                                            handleEnvironmentalSensor);\n      })\n      .then(_ => {\n        if (timeOutId.current) clearTimeout(timeOutId.current);\n        Countdown.current = maxOfCountdown;\n        timeOutId.current = null;\n        bleConnected.current = 1;\n        setOpenCircle(false);\n        setbleButtonClicked(false);\n        handleSnackbarOpen(\"Measurement is started\");\n        setConnectionText(\"DISCONNECT\");\n      })\n      .catch(error => {\n        bleConnected.current = 0;\n        handleSnackbarOpen(\"\" + error);\n        console.log(error);\n\n        if (bleDevice.bleInfo.device) {\n          timeOutId.current = setTimeout(handleBleToggle, 10000);\n          handleSnackbarOpen(\"Reconnection countdown: \" + Countdown.current);        \n          console.log(\"Reconnection countdown: \" + Countdown.current);\n          if (Countdown.current > 0) {\n            Countdown.current--;    \n          }\n          else {\n            if (timeOutId.current) clearTimeout(timeOutId.current);\n            Countdown.current = maxOfCountdown;\n            timeOutId.current = null; \n            setOpenCircle(false);\n            setbleButtonClicked(false);\n            handleSnackbarOpen(\"Cannot connect device...\");\n            console.log(\"Cannot connect device...\");\n          } \n        }\n        else {\n          setConnectionText(\"CONNECT\");\n          setbleButtonClicked(false);\n        }  \n      });\n    }\n    else {\n      setbleButtonClicked(true);\n      bleConnected.current = 0;\n      setConnectionText(\"CONNECT\");\n      bleDevice.disconnect(bleDevice.bleInfo.device);\n      setbleButtonClicked(false);\n      handleSnackbarOpen(\"The device is disconnected\");\n    }\n  }\n\n  const handleOnDisconnected = () => {\n    if (bleConnected.current) {\n      bleConnected.current = 0;\n      console.log(\"unexpected disconnection\");\n      handleBleToggle();\n    }\n    else {\n      bleConnected.current = 0;\n    }\n  }\n\n  const handleVoiceRecognitionResult = (event) => {\n    let value = event.target.value;\n    let result = {}; \n    result.wordId  = value.getUint8(0);\n    result.status  = value.getUint8(1);\n    result.score   = value.getUint8(2);\n    // Log\n    console.log(\"Word ID : \" + result.wordId);\n    console.log(\"Result : \"  + result.status);\n    console.log(\"Score : \"   + result.score);\n\n    setVoiceRecogResult({...result});\n  }\n\n  const handleEnvironmentalSensor = (event) => {\n   const value = event.target.value;\n   const sign = value.getUint8(0);\n   const result = {};\n   if (sign === 1) {\n     result.temperature  = (-1) * (value.getUint8(1) + (value.getUint8(2) * 0.01));\n   }\n   else {\n    result.temperature  = value.getUint8(1) + (value.getUint8(2) * 0.01);\n   } \n   result.humidity  = (value.getUint8(3) << 8)  + value.getUint8(4)  + (value.getUint8(5) * 0.01);\n   result.co2   = (value.getUint8(6) << 8)  + value.getUint8(7)  + (value.getUint8(8) * 0.01);\n   result.tvoc  = (value.getUint8(9) << 8)  + value.getUint8(10) + (value.getUint8(11) * 0.01);\n   result.iaq   = (value.getUint8(12) << 8) + value.getUint8(13) + (value.getUint8(14) * 0.01);\n    // Log\n    console.log(\"Temperature : \" + result.temperature);\n    console.log(\"Humidity : \"    + result.humidity);\n    console.log(\"CO2 : \"         + result.co2);\n    console.log(\"TVOC : \"        + result.tvoc);\n    console.log(\"IAQ : \"         + result.iaq);\n\n    setSensorData({...result});\n  }   \n\n  const readVoiceRecognitionInformation = () => {\n    return bleDevice.readValue(bleDevice.bleInfo.characteristicInfo.voiceRecogInfo.characteristic)\n    .then(information => {\n      let result = {};\n      result.status   = information.getUint8(0);\n      result.cf       = information.getUint8(1);\n      result.vd       = (information.getUint8(2) << 8) + information.getUint8(3);\n      result.gain     = information.getUint8(4);\n      result.ns       = information.getUint8(5);\n      result.bf       = information.getUint8(6);\n      result.wordId   = information.getUint8(7);\n      result.length   = information.getUint8(8);\n      let array       = information.buffer.slice(9, 9 + (result.length - 1));           \n      let decoder     = new TextDecoder(\"utf-8\"); \n      let uint8Array  = new Uint8Array(array);\n      result.text = decoder.decode(uint8Array); \n      console.log(result.text);\n      tmpWordInfo.current = [...tmpWordInfo.current, result];\n\n      if (result.status === isInProgress) {\n        return readVoiceRecognitionInformation();\n      }\n      else if (result.status === isFinished) {\n        setWordInfo([...tmpWordInfo.current]);       \n        return Promise.resolve();\n      }\n      else {\n        // nothing\n      }\n    })\n  }\n\n  const handlePageChanged = (text) => {\n    setCurrentPage(text);\n  }\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <List>\n        <ListItem button key={isVoiceRecogResult} onClick={() => handlePageChanged(isVoiceRecogResult)}>\n         <ListItemText primary={isVoiceRecogResult} />\n        </ListItem>\n        <ListItem button key={isVoiceRecogSettigs} onClick={handleNestedListClicked}>\n        <ListItemText primary={isVoiceRecogSettigs} />\n        {openNestedList ? <ExpandLess /> : <ExpandMore />}\n        </ListItem>\n        <Collapse in={openNestedList} timeout=\"auto\" unmountOnExit>\n          <List component=\"div\" disablePadding >\n            <ListItem \n            button \n            className={classes.nested} \n            key={isCfThreshold} \n            onClick={() => handlePageChanged(isCfThreshold)}>\n              <ListItemText primary={isCfThreshold} />\n            </ListItem>\n            <ListItem \n            button \n            className={classes.nested} \n            key={isVdThreshold} \n            onClick={() => handlePageChanged(isVdThreshold)}>\n              <ListItemText primary={isVdThreshold} />\n            </ListItem>\n            <ListItem \n            button \n            className={classes.nested} \n            key={isGain} \n            onClick={() => handlePageChanged(isGain)}>\n              <ListItemText primary={isGain} />\n            </ListItem>\n            <ListItem \n            button \n            className={classes.nested} \n            key={isNoiseSuppressor} \n            onClick={() => handlePageChanged(isNoiseSuppressor)}>\n              <ListItemText primary={isNoiseSuppressor} />\n            </ListItem>\n            <ListItem \n            button \n            className={classes.nested} \n            key={isBeamForming} \n            onClick={() => handlePageChanged( isBeamForming)}>\n              <ListItemText primary={isBeamForming} />\n            </ListItem>\n          </List>\n        </Collapse>\n        <ListItem button key={isIndoorEnvironment} onClick={() => handlePageChanged(isIndoorEnvironment)}>\n         <ListItemText primary={isIndoorEnvironment} />\n        </ListItem>\n        <ListItem>\n          <ListItemText key={isLedControl} primary={isLedControl} />\n          <ListItemSecondaryAction>\n            <Switch\n              edge=\"end\"\n              onChange={handleSwitchcheckedToggle(isLedControl)}\n              checked={switchChecked.indexOf(isLedControl) !== -1}\n              inputProps={{ 'aria-labelledby': isLedControl }}\n              color=\"primary\" \n            />\n          </ListItemSecondaryAction>\n        </ListItem>\n      </List>\n      <Divider />\n      <List>\n        <ListItem button key={isInstructions} onClick={() => handlePageChanged(isInstructions)}>\n          <ListItemText primary={isInstructions} />\n        </ListItem>\n      </List>\n    </div>\n  );\n\n\n  const container = window !== undefined ? () => window().document.body : undefined;\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n            style={{color:\"white\"}}>\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            RX23W HMI DEMO\n          </Typography>\n          <Button \n          color=\"inherit\" \n          style={{color:\"white\"}} \n          disabled = {Boolean(bleButtonClicked)}\n          onClick={handleBleToggle}>\n            {connectionText}\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              keepMounted: true, // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <DisplayPage \n        currentPage={currentPage} \n        wordInfo={wordInfo}\n        voiceRecogResult={voiceRecogResult}\n        sensorData={sensorData}\n        />\n      </main>\n      <Snackbar\n        open={snackbarState.open}\n        onClose={handleSnackbarClose}\n        message={snackbarState.message}\n        key={snackbarState.vertical + snackbarState.horizontal}\n        autoHideDuration={snackbarState.autoHideDuration}\n      />\n      <Backdrop className={classes.backdrop} open={openCircle} >\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </div>\n  );\n}\n\nfunction DisplayPage(props) {\n  const currentPage = props.currentPage;\n  const wordInfo = props.wordInfo;\n  const voiceRecogResult = props.voiceRecogResult;\n  const sensorData = props.sensorData;\n\n  switch (currentPage) {\n    case isVoiceRecogResult :\n      return (\n        <PageIsVoiceRecogResult wordInfo={wordInfo} voiceRecogResult={voiceRecogResult}/>\n      // <div>\n      //   <Typography>Voice Recognition Result</Typography>\n      //   <Typography>Word ID : {voiceRecogResult.wordId}</Typography>\n      //   <Typography>Status : {voiceRecogResult.status}</Typography>\n      //   <Typography>Score : {voiceRecogResult.score}</Typography>\n      //   <DrawWordList wordInfo={wordInfo}/>\n      // </div>\n      );\n\n    case isCfThreshold : \n      return (\n        <div>\n          <Typography>Confidence Threshold</Typography>\n          {/* <PageIsVoiceRecogSettings wordInfo={wordInfo} parameter={isCfThreshold}/> */}\n        </div>\n      );\n\n    case isVdThreshold : \n      return (\n        <div>\n          <Typography>Vocie Detection Threshold</Typography>\n          {/* <PageIsVoiceRecogSettings wordInfo={wordInfo} parameter={isVdThreshold}/> */}\n        </div>\n      );   \n      \n    case isGain : \n      return (\n        <div>\n          <Typography>Gain</Typography>\n          {/* <PageIsVoiceRecogSettings wordInfo={wordInfo} parameter={isGain}/> */}\n        </div>\n      ); \n\n    case isNoiseSuppressor : \n      return (\n        <div>\n          <Typography>Noise Suppressor</Typography>\n          {/* <PageIsVoiceRecogSettings wordInfo={wordInfo} parameter={isNoiseSuppressor}/> */}\n        </div>\n      );   \n      \n    case isBeamForming : \n      return (\n        <div>\n          <Typography>Beam Forming</Typography>\n          {/* <PageIsVoiceRecogSettings wordInfo={wordInfo} parameter={isBeamForming}/> */}\n        </div>\n      ); \n\n    case isIndoorEnvironment :\n      return(\n        <div>\n          <PageIsIndoorEnvironment sensorData={sensorData} />\n          {/* <Typography>Indoor Environment</Typography> */}\n        {/* <Typography>Temperature : {sensorData.temperature} [℃]</Typography>\n        <Typography>Humidity : {sensorData.humidity} [%RH]</Typography>\n        <Typography>CO2 : {sensorData.co2} [ppm]</Typography>\n        <Typography>TVOC : {sensorData.tvoc} [mg/m3]</Typography>\n        <Typography>IAQ : {sensorData.iaq}</Typography> */}\n        </div>\n      );\n\n    case isInstructions :\n      return (\n        <div>\n          {/* <PageIsInstructions /> */}\n          <Typography>Instructions</Typography>\n        </div>\n        );\n\n    default :\n    return (\n      <div>\n        <Typography>Error</Typography>\n      </div>\n      );\n  }\n}\n\n// function DrawWordList(props) {\n//   const wordInfo = props.wordInfo;\n//   let list = [];\n\n//   if (!wordInfo.length) {\n//     return (<Typography>No word list</Typography>);\n//   }\n//   else {\n//     for ( let i in wordInfo) {\n//       list.push(<li key={wordInfo[i].text}>{wordInfo[i].text}</li>);\n//     }\n  \n//     return(\n//       <ol>\n//         {list}\n//       </ol>\n//     );\n//   }\n// }\n\n\nApp.propTypes = {\n\n  window: PropTypes.func,\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createMuiTheme} from '@material-ui/core/styles'\nimport {MuiThemeProvider} from '@material-ui/core/styles' \n\nconst theme = createMuiTheme({ \n  palette: {\n    primary: {\n      light: '#5453b0',\n      main: '#2a289d',\n      dark: '#1d1c6d',\n      contrastText: '#000000',\n    },\n    secondary: {\n      light: '#5b5b5b',\n      main: '#333333',\n      dark: '#232323',\n      contrastText: '#000000',\n    },\n  },\n})\n\nReactDOM.render(\n  // <React.StrictMode>\n      <MuiThemeProvider theme={theme}>\n        <App/>\n      </MuiThemeProvider>\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}