{"version":3,"sources":["ble.js","App.js","serviceWorker.js","index.js"],"names":["characteristicInfo","voiceRecogResult","uuid","characteristic","voiceRecogInfo","voiceRecogParams","ledControl","envSensor","options","filters","services","name","BleDevice","props","device","server","service","characteristics","connectionStatus","wordInfo","onClick","bind","this","requestDevice","then","console","log","getPrimaryService","getCharacteristics","forEach","readVoiceRecognitionInformation","_","writeWithoutResponse","addEventListener","handleVoiceRecognitionResult","startNotifications","handleEnvironmentalSensor","catch","error","gatt","connect","navigator","bluetooth","onDisconnected","characteristicId","value","readValue","information","result","status","getUint8","cf","vd","gain","ns","bf","wordId","length","array","buffer","slice","decoder","TextDecoder","uint8Array","Uint8Array","word","decode","getWordInfo","Promise","resolve","connected","writeValue","writeValueWithoutResponse","score","sign","temperature","humidity","co2","tvoc","iaq","style","width","height","backgroundColor","color","border","borderRadius","fontSize","fontWeight","React","Component","App","state","voiceRecogData","sensorData","bleDevice","nextProps","nextState","event","parseVoiceRecognitionResult","target","setState","parseSensorData","info","wordText","word0","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1d05e015.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n/* export paramteres */\r\nconst isDisconnected    = 0;\r\nconst isConnected       = 1;\r\n\r\n/* private parameters */\r\nconst isFinished         = 0;\r\nconst isInProgress       = 1;\r\nconst bleDeviceName      = 'RBLE-DEV';\r\nconst hmiServiceUuid     = '65bcbd70-7952-439b-80b5-a5e8c4de44b0';\r\nconst characteristicInfo = {\r\n    voiceRecogResult    : { uuid : '0c71cedc-c090-4021-80a1-95c4b3215be8',\r\n                            characteristic : null,},\r\n    voiceRecogInfo      : { uuid : '3ea2a6d7-bf5a-4841-870a-5df9c34895d9',\r\n                            characteristic : null,},\r\n    voiceRecogParams    : { uuid : 'c609788e-2f87-4ac8-b622-99e77287ca3c',\r\n                            characteristic : null,},\r\n    ledControl          : { uuid : 'c1f878d3-ff13-4a18-9b4d-058942171f8d',\r\n                            characteristic : null,},\r\n    envSensor           : { uuid : 'bcabfa13-a223-4715-a72e-60067b5a1537',\r\n                            characteristic : null,},\r\n};\r\nconst options = {\r\n    filters: [\r\n        {services: [hmiServiceUuid]},\r\n        {name: bleDeviceName}\r\n    ]\r\n};   \r\n\r\nclass BleDevice extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.device             = null;\r\n        this.server             = null;\r\n        this.service            = null;\r\n        this.characteristics    = null;\r\n        this.connectionStatus   = isDisconnected;    \r\n        this.wordInfo           = [];\r\n        this.onClick            = this.onClick.bind(this);\r\n    }\r\n\r\n    connect() {\r\n        return this.requestDevice()\r\n        .then(server => {\r\n            this.server = server;\r\n            console.log(\"Get the server\");\r\n            return server.getPrimaryService(hmiServiceUuid);\r\n        })\r\n        .then(service => {\r\n            this.service = service;\r\n            console.log(\"Get the service\");\r\n            /* Get all characteristics */\r\n            return service.getCharacteristics();\r\n        })\r\n        .then(characteristics => {\r\n            console.log(\"Get the characteristics\");\r\n            characteristics.forEach(characteristic => {\r\n                switch (characteristic.uuid) {\r\n                    case characteristicInfo.voiceRecogResult.uuid :\r\n                        characteristicInfo.voiceRecogResult.characteristic = characteristic;\r\n                        console.log(\"Get Voice Recognition Result Characteristic\");\r\n                    break;\r\n\r\n                    case characteristicInfo.voiceRecogInfo.uuid :\r\n                        characteristicInfo.voiceRecogInfo.characteristic = characteristic;\r\n                        console.log(\"Get Voice Recognition Information Characteristic\");\r\n                    break;\r\n\r\n                    case characteristicInfo.voiceRecogParams.uuid :\r\n                        characteristicInfo.voiceRecogParams.characteristic = characteristic;\r\n                        console.log(\"Get Voice Recognition Parameters Characteristic\");\r\n                    break;\r\n\r\n                    case characteristicInfo.ledControl.uuid :\r\n                        characteristicInfo.ledControl.characteristic = characteristic;\r\n                        console.log(\"Get LED Control Characteristic\");\r\n                    break;\r\n\r\n                    case characteristicInfo.envSensor.uuid :\r\n                        characteristicInfo.envSensor.characteristic = characteristic;\r\n                        console.log(\"Get Environmental Sensor Characteristic\");\r\n                    break;\r\n\r\n                    default :\r\n                    break;\r\n                }\r\n            })\r\n            return this.readVoiceRecognitionInformation(characteristicInfo.voiceRecogInfo.characteristic);\r\n        })\r\n        // .then(_ => {\r\n        //     console.log(\"Start Write Voice Recognition Parameters Confidence Threshold\");\r\n        //     return this.writeWithoutResponse(characteristicInfo.voiceRecogParams.characteristic, [1, 0, 100, 1]);\r\n        // })\r\n        // .then(_ => {\r\n        //     console.log(\"Start Write Voice Recognition Parameters Voice Detection Threshold\");\r\n        //     return this.writeWithoutResponse(characteristicInfo.voiceRecogParams.characteristic, [2, 0, 100, 1]);\r\n        // })\r\n        // .then(_ => {\r\n        //     console.log(\"Start Write Voice Recognition Parameters Gain\");\r\n        //     return this.writeWithoutResponse(characteristicInfo.voiceRecogParams.characteristic, [3, 0, 5, 1]);\r\n        // })\r\n        // .then(_ => {\r\n        //     console.log(\"Start Write Voice Recognition Parameters Noise Suppressor\");\r\n        //     return this.writeWithoutResponse(characteristicInfo.voiceRecogParams.characteristic, [4, 0, 5, 1]);\r\n        // })\r\n        // .then(_ => {\r\n        //     console.log(\"Start Write Voice Recognition Parameters Beam Forming\");\r\n        //     return this.writeWithoutResponse(characteristicInfo.voiceRecogParams.characteristic, [5, 0, 5, 1]);\r\n        // })\r\n        .then(_ => {\r\n            console.log(\"Start Write LED LEVEL\");\r\n            return this.writeWithoutResponse(characteristicInfo.ledControl.characteristic, [1]);\r\n        })\r\n        .then(_ => {\r\n            console.log(\"Start notification of voice recognition result\");\r\n            characteristicInfo.voiceRecogResult.characteristic.addEventListener('characteristicvaluechanged', this.props.handleVoiceRecognitionResult);\r\n            return characteristicInfo.voiceRecogResult.characteristic.startNotifications();\r\n        })\r\n        .then(_ => {\r\n            console.log(\"Start notification of environmental sensor\");\r\n            characteristicInfo.envSensor.characteristic.addEventListener('characteristicvaluechanged', this.props.handleEnvironmentalSensor);\r\n            return characteristicInfo.envSensor.characteristic.startNotifications();\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    requestDevice() {\r\n        if (!this.device) {\r\n            console.log(\"Request the device\");\r\n            return navigator.bluetooth.requestDevice(options)\r\n            .then(device => {\r\n                this.device = device;\r\n                this.device.addEventListener('gattserverdisconnected', this.onDisconnected);\r\n                return device.gatt.connect();\r\n            })\r\n        }\r\n        else {\r\n            console.log(\"Use the device information that I already have\");\r\n            return this.device.gatt.connect();\r\n        }\r\n    }\r\n\r\n    onDisconnected() {\r\n\r\n    }\r\n\r\n    writeValueWithoutResponse(characteristicId, value) {\r\n\r\n    }\r\n\r\n    readVoiceRecognitionInformation(characteristic) {\r\n        if (!characteristic) {\r\n            console.log(\"No characteristic\");\r\n            return;\r\n        }\r\n\r\n        console.log(\"Get value of voice recognition information\");\r\n        return characteristic.readValue()\r\n        .then(information => {\r\n            let result = {};\r\n\r\n            console.log(information);\r\n\r\n            result.status   = information.getUint8(0);\r\n            result.cf       = information.getUint8(1);\r\n            result.vd       = (information.getUint8(2) << 8) + information.getUint8(3);\r\n            result.gain     = information.getUint8(4);\r\n            result.ns       = information.getUint8(5);\r\n            result.bf       = information.getUint8(6);\r\n            result.wordId   = information.getUint8(7);\r\n            result.length   = information.getUint8(8);\r\n\r\n            let array       = information.buffer.slice(9, 9 + result.length);           \r\n            let decoder     = new TextDecoder(\"utf-8\"); \r\n            let uint8Array  = new Uint8Array(array);\r\n\r\n            result.word = decoder.decode(uint8Array); \r\n\r\n            /* Set word information */\r\n            this.wordInfo = [...this.wordInfo, result];\r\n\r\n            if (result.status === 1) {\r\n                console.log(\"Status : Is in progress\");\r\n            }\r\n            else {\r\n                console.log(\"Status : Is finished\");\r\n            }   \r\n            console.log(\"Parameters\");\r\n            console.log(\"Confidence Threshold : \" + result.cf);\r\n            console.log(\"Voice Detection Threshold : \" + result.vd);\r\n            console.log(\"Gain : \" + result.gain);\r\n            console.log(\"Noise Suppressor : \" + result.ns);\r\n            console.log(\"Beam Forming : \" + result.bf);\r\n          \r\n            console.log(\"Word Id : \" + result.wordId);\r\n            console.log(\"length : \" + result.length);                  \r\n            console.log(\"Word : \"   + result.word);\r\n            \r\n            if (result.status === isInProgress) {\r\n                return this.readVoiceRecognitionInformation(characteristic);\r\n            }\r\n            else {\r\n                this.props.getWordInfo(this.wordInfo);\r\n                return Promise.resolve();\r\n            }\r\n        })\r\n    }\r\n\r\n    /** Send data to ble device (w/o response) */\r\n    writeWithoutResponse(characteristic, value) {\r\n        if (!this.device) {\r\n            console.log('Error : No Bluetooth Device');\r\n            return;\r\n        }\r\n    \r\n        if (this.device.gatt.connected) { \r\n            var writeValue = new Uint8Array(value);       \r\n            console.log('write: ' + writeValue);\r\n            return characteristic.writeValueWithoutResponse(writeValue);\r\n        } \r\n        else {\r\n            console.log('Error : No connect');\r\n            return;\r\n        }   \r\n    }\r\n\r\n     parseVoiceRecognitionResult(value) {\r\n     let result = {};\r\n\r\n     // Calculate voice recognition result\r\n     result.wordId  = value.getUint8(0);\r\n     result.status  = value.getUint8(1);\r\n     result.score   = value.getUint8(2);\r\n\r\n     return result;\r\n    }\r\n\r\n    parseSensorData(value) {\r\n     let result = {};\r\n     let sign = 0;\r\n\r\n     // Calculate sensor data\r\n     sign                   = value.getUint8(0);\r\n     result.temperature     = value.getUint8(1) + (value.getUint8(2) * 0.01);\r\n     if (sign === 1) {\r\n         result.temperature *= (-1);\r\n     }\r\n\r\n     result.humidity        = (value.getUint8(3) << 8)  + value.getUint8(4)  + (value.getUint8(5) * 0.01);\r\n     result.co2             = (value.getUint8(6) << 8)  + value.getUint8(7)  + (value.getUint8(8) * 0.01);\r\n     result.tvoc            = (value.getUint8(9) << 8)  + value.getUint8(10) + (value.getUint8(11) * 0.01);\r\n     result.iaq             = (value.getUint8(12) << 8) + value.getUint8(13) + (value.getUint8(14) * 0.01);\r\n\r\n     return result;\r\n    }\r\n\r\n    onClick() {\r\n        this.connect();\r\n    }\r\n\r\n    render() {\r\n        let buttonStyle = {\r\n            width: 200,\r\n            height: 100,\r\n            backgroundColor: \"#3F51B5\",\r\n            color: \"rgba(255,255,255,.87)\",\r\n            border: \"none\",\r\n            borderRadius: 20,\r\n            fontSize: 36,\r\n            fontWeight: \"bold\"\r\n          };\r\n        return (\r\n          <div>\r\n            <button style={buttonStyle} onClick={this.onClick} >\r\n              Connect\r\n            </button>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\n export { BleDevice };","import React from 'react';\nimport { BleDevice } from './ble.js';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // bleDevice : new BleDevice(),\n      wordInfo : [],\n      voiceRecogData : {},\n      sensorData : {},\n    };\n    this.bleDevice                    = new BleDevice();\n    this.handleVoiceRecognitionResult = this.handleVoiceRecognitionResult.bind(this);\n    this.handleEnvironmentalSensor    = this.handleEnvironmentalSensor.bind(this);\n    this.getWordInfo                  = this.getWordInfo.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState){\n    return true;\n  }\n\n  handleVoiceRecognitionResult(event) {\n    let result = this.bleDevice.parseVoiceRecognitionResult(event.target.value);\n\n    // Log\n    console.log(\"Word ID : \" + result.wordId);\n    console.log(\"Result : \"  + result.status);\n    console.log(\"Score : \"   + result.score);\n\n    this.setState({voiceRecogData : {...result}});\n }\n\n handleEnvironmentalSensor(event) {\n    let result = this.bleDevice.parseSensorData(event.target.value);\n\n    // Log\n    console.log(\"Temperature : \" + result.temperature);\n    console.log(\"Humidity : \"    + result.humidity);\n    console.log(\"CO2 : \"         + result.co2);\n    console.log(\"TVOC : \"        + result.tvoc);\n    console.log(\"IAQ : \"         + result.iaq);\n\n    this.setState({sensorData : {...result}});\n}\n\ngetWordInfo(info) {\n  this.setState({wordInfo : [...info]});\n  console.log(this.state.wordInfo);\n}\n\n  render() {\n    console.log('render');\n    let word0 = this.state.wordInfo[0];\n    let wordText;\n    if (word0) {\n      wordText = <div>word[0]: {word0.word.slice(0,-1)}</div>\n    }\n    else {\n      wordText = <div>word[0]: No text</div>\n    }\n\n    return (\n      <div>\n        <BleDevice  \n        handleVoiceRecognitionResult = {this.handleVoiceRecognitionResult} \n        handleEnvironmentalSensor = {this.handleEnvironmentalSensor} \n        getWordInfo = {this.getWordInfo} />\n        {wordText}\n        <div>temperature: {this.state.sensorData.temperature}</div>\n        <div>status: {this.state.voiceRecogData.status}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}